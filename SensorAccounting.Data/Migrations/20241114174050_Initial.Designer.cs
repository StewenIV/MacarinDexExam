// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SensorAccounting.DbContext;

#nullable disable

namespace SensorAccounting.Migrations
{
    [DbContext(typeof(SensorAccountingDbContext))]
    [Migration("20241114174050_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Buildings.Domain.Models.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("adress");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<Guid>("IdPerson")
                        .HasColumnType("uuid")
                        .HasColumnName("id_person");

                    b.Property<string>("NameBuilding")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_building");

                    b.HasKey("Id")
                        .HasName("id_building");

                    b.HasIndex("IdPerson");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Buildings.Domain.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdSensor")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("IdSensor");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Buildings.Domain.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("id_person");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Buildings.Domain.Models.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChargeLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("IdBuilding")
                        .HasColumnType("uuid");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("MinTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("UrlPhoto")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdBuilding");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Buildings.Domain.Models.Building", b =>
                {
                    b.HasOne("Buildings.Domain.Models.Person", "Person")
                        .WithMany("Buildings")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Buildings.Domain.Models.Notification", b =>
                {
                    b.HasOne("Buildings.Domain.Models.Sensor", null)
                        .WithMany("Notifications")
                        .HasForeignKey("IdSensor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Buildings.Domain.Models.Sensor", b =>
                {
                    b.HasOne("Buildings.Domain.Models.Building", "Building")
                        .WithMany("Sensors")
                        .HasForeignKey("IdBuilding")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Buildings.Domain.Models.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("SensorId")
                                .HasColumnType("uuid");

                            b1.Property<int>("X")
                                .HasColumnType("integer")
                                .HasColumnName("LocationX");

                            b1.Property<int>("Y")
                                .HasColumnType("integer")
                                .HasColumnName("LocationY");

                            b1.HasKey("SensorId");

                            b1.ToTable("Sensors");

                            b1.WithOwner()
                                .HasForeignKey("SensorId");
                        });

                    b.Navigation("Building");

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Buildings.Domain.Models.Building", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Buildings.Domain.Models.Person", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("Buildings.Domain.Models.Sensor", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
